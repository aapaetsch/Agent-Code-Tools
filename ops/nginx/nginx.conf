
events { worker_connections 1024; }

http {
  # --- Enhanced logging for MCP debugging ---
  log_format mcp_debug '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'accept="$http_accept" '
                       'content_type="$http_content_type" '
                       'mcp_protocol="$http_mcp_protocol_version" '
                       'session_id="$mcp_session_header" '
                       'origin="$http_origin" '
                       'x_forwarded_for="$http_x_forwarded_for" '
                       'upstream_addr="$upstream_addr" '
                       'upstream_status="$upstream_status" '
                       'upstream_response_time="$upstream_response_time"';

  access_log /var/log/nginx/access.log mcp_debug;
  error_log /var/log/nginx/error.log debug;
  
  # --- Streaming-friendly proxy defaults ---
  proxy_http_version 1.1;
  proxy_buffering off;
  proxy_request_buffering off;
  proxy_redirect off;
  proxy_read_timeout 3600s;
  proxy_send_timeout 3600s;
  sendfile on;

  underscores_in_headers on;

  # --- CORS helpers ---
  map $http_origin $cors_allow_origin { default $http_origin; }

  # Prefer original scheme if forwarded by Tailscale/another proxy
  map $http_x_forwarded_proto $origin_scheme { default $http_x_forwarded_proto; "" $scheme; }

  # Synthesize Origin if missing (incl. correct scheme)
  map $http_origin $origin_fallback {
    default $http_origin;
    ""      $origin_scheme://$host;
  }

  # Pass through the original Accept header as-is (per MCP spec)
  map $http_accept $accept_passthrough {
    default $http_accept;
    ""      "application/json, text/event-stream";
  }

  # Case-insensitive session ID handling - prefer lowercase then titlecase
  map $http_mcp_session_id $mcp_session_id_raw {
    default $http_mcp_session_id;
    ""      $http_Mcp_Session_Id;
  }
  
  # Only pass through session ID if client provides one
  map $mcp_session_id_raw $mcp_session_id {
    default $mcp_session_id_raw;
    ""      "";
  }

  # Create header only when session ID exists - set to empty to not send header
  map $mcp_session_id_raw $mcp_session_header {
    default $mcp_session_id_raw;
    ""      ""; # Empty means don't send the header
  }

  # Provide default MCP protocol version when missing
  map $http_mcp_protocol_version $mcp_protocol_version {
    default $http_mcp_protocol_version;
    ""      "2025-06-18";
  }

  # Cache correctness
  map "" $vary_origin { default "Origin"; }

  # Forward original scheme by default (can be overridden in location)
  proxy_set_header X-Forwarded-Proto $origin_scheme;

  # --- Upstreams ---
  upstream regex_tools  { server mcp-all-servers:3001; keepalive 32; }
  upstream math_tools   { server mcp-all-servers:3002; keepalive 32; }
  upstream string_tools { server mcp-all-servers:3003; keepalive 32; }
  upstream date_tools   { server mcp-all-servers:3004; keepalive 32; }

  # HTTP Server
  server {
    listen 8080;
    server_name _;

    # Health
    location = /health {
      add_header Content-Type text/plain;
      return 200 "ok\n";
    }

    # ===== Regex Tools =====
    location /regex/ {
      rewrite ^/regex/(.*)$ /$1 break;

      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin  $cors_allow_origin;
        add_header Access-Control-Allow-Methods "GET,POST,OPTIONS,DELETE";
        add_header Access-Control-Allow-Headers "Content-Type, Accept, Authorization, X-Requested-With, Mcp-Session-Id, MCP-Session-Id, MCP-Protocol-Version";
        add_header Access-Control-Allow-Credentials "true";
        add_header Access-Control-Max-Age 86400;
        add_header Vary $vary_origin always;
        return 204;
      }

      add_header Access-Control-Allow-Origin  $cors_allow_origin always;
      add_header Access-Control-Allow-Credentials "true" always;
      add_header Access-Control-Expose-Headers "Mcp-Session-Id, MCP-Session-Id" always;
      add_header Vary $vary_origin always;

      proxy_set_header Origin          $origin_fallback;
      proxy_set_header Accept          $accept_passthrough;
      proxy_set_header Mcp-Session-Id  $mcp_session_header;
      proxy_set_header MCP-Protocol-Version $mcp_protocol_version;

      proxy_set_header Host              $host;
      proxy_set_header Connection "";
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $origin_scheme;
      proxy_set_header X-Forwarded-Host  $host;

      proxy_pass http://regex_tools;
    }

    # ===== Math Tools =====
    location /math/ {
      rewrite ^/math/(.*)$ /$1 break;

      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin  $cors_allow_origin;
        add_header Access-Control-Allow-Methods "GET,POST,OPTIONS,DELETE";
        add_header Access-Control-Allow-Headers "Content-Type, Accept, Authorization, X-Requested-With, Mcp-Session-Id, MCP-Session-Id, MCP-Protocol-Version";
        add_header Access-Control-Allow-Credentials "true";
        add_header Access-Control-Max-Age 86400;
        add_header Vary $vary_origin always;
        return 204;
      }

      add_header Access-Control-Allow-Origin  $cors_allow_origin always;
      add_header Access-Control-Allow-Credentials "true" always;
      add_header Access-Control-Expose-Headers "Mcp-Session-Id, MCP-Session-Id" always;
      add_header Vary $vary_origin always;

      proxy_set_header Origin          $origin_fallback;
      proxy_set_header Accept          $accept_passthrough;
      proxy_set_header Mcp-Session-Id  $mcp_session_header;
      proxy_set_header MCP-Protocol-Version $mcp_protocol_version;

      proxy_set_header Host              $host;
      proxy_set_header Connection "";
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $origin_scheme;
      proxy_set_header X-Forwarded-Host  $host;

      proxy_pass http://math_tools;
    }

    # ===== String Tools =====
    location /string/ {
      rewrite ^/string/(.*)$ /$1 break;

      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin  $cors_allow_origin;
        add_header Access-Control-Allow-Methods "GET,POST,OPTIONS,DELETE";
        add_header Access-Control-Allow-Headers "Content-Type, Accept, Authorization, X-Requested-With, Mcp-Session-Id, MCP-Session-Id, MCP-Protocol-Version";
        add_header Access-Control-Allow-Credentials "true";
        add_header Access-Control-Max-Age 86400;
        add_header Vary $vary_origin always;
        return 204;
      }

      add_header Access-Control-Allow-Origin  $cors_allow_origin always;
      add_header Access-Control-Allow-Credentials "true" always;
      add_header Access-Control-Expose-Headers "Mcp-Session-Id, MCP-Session-Id" always;
      add_header Vary $vary_origin always;

      proxy_set_header Origin          $origin_fallback;
      proxy_set_header Accept          $accept_passthrough;
      proxy_set_header Mcp-Session-Id  $mcp_session_header;
      proxy_set_header MCP-Protocol-Version $mcp_protocol_version;

      proxy_set_header Host              $host;
      proxy_set_header Connection "";
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $origin_scheme;
      proxy_set_header X-Forwarded-Host  $host;

      proxy_pass http://string_tools;
    }

    # ===== Date Tools =====
    location /date/ {
      rewrite ^/date/(.*)$ /$1 break;

      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin  $cors_allow_origin;
        add_header Access-Control-Allow-Methods "GET,POST,OPTIONS,DELETE";
        add_header Access-Control-Allow-Headers "Content-Type, Accept, Authorization, X-Requested-With, Mcp-Session-Id,  MCP-Protocol-Version";
        add_header Access-Control-Allow-Credentials "true";
        add_header Access-Control-Max-Age 86400;
        add_header Vary $vary_origin always;
        return 204;
      }

      add_header Access-Control-Allow-Origin  $cors_allow_origin always;
      add_header Access-Control-Allow-Credentials "true" always;
      add_header Access-Control-Expose-Headers "Mcp-Session-Id, MCP-Session-Id" always;
      add_header Vary $vary_origin always;

      proxy_set_header Origin          $origin_fallback;
      proxy_set_header Accept          $accept_passthrough;
      proxy_set_header Mcp-Session-Id  $mcp_session_header;
      proxy_set_header MCP-Protocol-Version $mcp_protocol_version;

      proxy_set_header Host              $host;
      proxy_set_header Connection "";
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $origin_scheme;
      proxy_set_header X-Forwarded-Host  $host;

      proxy_pass http://date_tools;
    }
  }
}