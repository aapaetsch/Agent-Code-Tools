worker_processes  1;

events { worker_connections 1024; }

http {
  # --- General proxy defaults suitable for SSE/long-running requests ---
  proxy_http_version 1.1;
  proxy_buffering off;                 # disable buffering for streaming/SSE
  proxy_request_buffering off;         # do not buffer client request body
  proxy_redirect off;
  proxy_read_timeout 3600s;            # long-lived SSE
  proxy_send_timeout 3600s;
  sendfile on;

  # If your MCP HTTP transport uses custom headers with dashes/underscores
  underscores_in_headers on;

  # --- CORS helper (so n8n in a browser/remote host can call you) ---
  map $http_origin $cors_allow_origin {
    default $http_origin;
  }

  # Reusable CORS snippet
  # Include in each MCP location and in `OPTIONS` handling.
  map "" $cors_headers { default 0; }

  # --- Upstreams (containers/pods) ---
  upstream regex_tools  { server mcp-all-servers:3001; keepalive 32; }
  upstream math_tools   { server mcp-all-servers:3002; keepalive 32; }
  upstream string_tools { server mcp-all-servers:3003; keepalive 32; }
  upstream date_tools   { server mcp-all-servers:3004; keepalive 32; }

  server {
    # Expose whatever port your host expects (change to 80/443 as needed)
    listen 8080;
    server_name _;

    # --- Global health check for container/infra ---
    location = /health {
      add_header Content-Type text/plain;
      return 200 "ok\n";
    }

    # ===== Common proxy headers (include in each location) =====
    # We keep this as a snippet for maintainability.
    set $mcp_common 1;
    if ($mcp_common) {
      # no-op; marker for readability
    }

    # -------- Regex Tools --------
    location /regex/ {
      # Strip prefix so upstream sees e.g. "/" or "/sse" or "/messages"
      rewrite ^/regex/(.*)$ /$1 break;

      # CORS
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin  $cors_allow_origin;
        add_header Access-Control-Allow-Methods "GET,POST,OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
        add_header Access-Control-Allow-Credentials "true";
        add_header Access-Control-Max-Age 86400;
        return 204;
      }
      add_header Access-Control-Allow-Origin  $cors_allow_origin always;
      add_header Access-Control-Allow-Credentials "true" always;

      # SSE/HTTP (no WebSocket Upgrade needed unless your server uses WS)
      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # If your MCP server actually uses WebSocket, uncomment:
      # proxy_set_header Upgrade $http_upgrade;
      # proxy_set_header Connection $connection_upgrade;

      proxy_pass http://regex_tools;
    }

    # -------- Math Tools --------
    location /math/ {
      rewrite ^/math/(.*)$ /$1 break;

      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin  $cors_allow_origin;
        add_header Access-Control-Allow-Methods "GET,POST,OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
        add_header Access-Control-Allow-Credentials "true";
        add_header Access-Control-Max-Age 86400;
        return 204;
      }
      add_header Access-Control-Allow-Origin  $cors_allow_origin always;
      add_header Access-Control-Allow-Credentials "true" always;

      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_pass http://math_tools;
    }

    # -------- String Tools --------
    location /string/ {
      rewrite ^/string/(.*)$ /$1 break;

      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin  $cors_allow_origin;
        add_header Access-Control-Allow-Methods "GET,POST,OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
        add_header Access-Control-Allow-Credentials "true";
        add_header Access-Control-Max-Age 86400;
        return 204;
      }
      add_header Access-Control-Allow-Origin  $cors_allow_origin always;
      add_header Access-Control-Allow-Credentials "true" always;

      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_pass http://string_tools;
    }

    # -------- Date Tools --------
    location /date/ {
      rewrite ^/date/(.*)$ /$1 break;

      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin  $cors_allow_origin;
        add_header Access-Control-Allow-Methods "GET,POST,OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
        add_header Access-Control-Allow-Credentials "true";
        add_header Access-Control-Max-Age 86400;
        return 204;
      }
      add_header Access-Control-Allow-Origin  $cors_allow_origin always;
      add_header Access-Control-Allow-Credentials "true" always;

      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_pass http://date_tools;
    }
  }
  server {
    # Expose whatever port your host expects (change to 80/443 as needed)
    listen 8443;
    server_name _;

    # --- Global health check for container/infra ---
    location = /health {
      add_header Content-Type text/plain;
      return 200 "ok\n";
    }

    # ===== Common proxy headers (include in each location) =====
    # We keep this as a snippet for maintainability.
    set $mcp_common 1;
    if ($mcp_common) {
      # no-op; marker for readability
    }

    # -------- Regex Tools --------
    location /regex/ {
      # Strip prefix so upstream sees e.g. "/" or "/sse" or "/messages"
      rewrite ^/regex/(.*)$ /$1 break;

      # CORS
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin  $cors_allow_origin;
        add_header Access-Control-Allow-Methods "GET,POST,OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
        add_header Access-Control-Allow-Credentials "true";
        add_header Access-Control-Max-Age 86400;
        return 204;
      }
      add_header Access-Control-Allow-Origin  $cors_allow_origin always;
      add_header Access-Control-Allow-Credentials "true" always;

      # SSE/HTTP (no WebSocket Upgrade needed unless your server uses WS)
      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # If your MCP server actually uses WebSocket, uncomment:
      # proxy_set_header Upgrade $http_upgrade;
      # proxy_set_header Connection $connection_upgrade;

      proxy_pass http://regex_tools;
    }

    # -------- Math Tools --------
    location /math/ {
      rewrite ^/math/(.*)$ /$1 break;

      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin  $cors_allow_origin;
        add_header Access-Control-Allow-Methods "GET,POST,OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
        add_header Access-Control-Allow-Credentials "true";
        add_header Access-Control-Max-Age 86400;
        return 204;
      }
      add_header Access-Control-Allow-Origin  $cors_allow_origin always;
      add_header Access-Control-Allow-Credentials "true" always;

      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_pass http://math_tools;
    }

    # -------- String Tools --------
    location /string/ {
      rewrite ^/string/(.*)$ /$1 break;

      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin  $cors_allow_origin;
        add_header Access-Control-Allow-Methods "GET,POST,OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
        add_header Access-Control-Allow-Credentials "true";
        add_header Access-Control-Max-Age 86400;
        return 204;
      }
      add_header Access-Control-Allow-Origin  $cors_allow_origin always;
      add_header Access-Control-Allow-Credentials "true" always;

      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_pass http://string_tools;
    }

    # -------- Date Tools --------
    location /date/ {
      rewrite ^/date/(.*)$ /$1 break;

      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin  $cors_allow_origin;
        add_header Access-Control-Allow-Methods "GET,POST,OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
        add_header Access-Control-Allow-Credentials "true";
        add_header Access-Control-Max-Age 86400;
        return 204;
      }
      add_header Access-Control-Allow-Origin  $cors_allow_origin always;
      add_header Access-Control-Allow-Credentials "true" always;

      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_pass http://date_tools;
    }
  }
}
